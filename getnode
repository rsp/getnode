#!/bin/bash

# RSP 2010-09-16

function SECTION { read -d '' $1; }

SECTION HEADER << 'END_HEADER'
Copyright (c) 2010, 2011 Rafal Pocztarski.
This program comes with ABSOLUTELY NO WARRANTY.  It is released under
the MIT License.  See LICENSE or run `getnode license` for details.
END_HEADER

SECTION LICENSE << 'END_LICENSE'
Copyright (c) 2010, 2011 Rafal Pocztarski

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
END_LICENSE

SECTION INTRO << 'END_INTRO'
Getnode downloads, configures, builds and tests the Node.js source code.
It verifies the SHA-1 checksum of the downloaded source code.
[Project home page](https://github.com/rsp/getnode)
END_INTRO

SECTION USAGE << 'END_USAGE'
Usage: 
       getnode VERSION
       getnode VERSION PREFIX

It downloads http://nodejs.org/dist/node-vVERSION.tar.gz
and builds for installation in PREFIX or $HOME/local/node by default.
If PREFIX is `v` or `V` it is equivalent to $HOME/local/node-VERSION
(Note: the default prefix may change in later versions)

Examples:
          getnode 0.4.4
          getnode 0.4.4 v
          getnode 0.4.4 ~/node-0.4
END_USAGE

SECTION DESCRIPTION << 'END_DESCRIPTION'
ABOUT NODE
----------
[Node.js](http://nodejs.org/) is an event-driven I/O framework for the V8
JavaScript engine developed by [Ryan Dahl](https://github.com/ry).

ABOUT GETNODE
-------------
[Getnode](https://github.com/rsp/getnode) is a shell script that
downloads the source code of a given version of Node, calculates SHA-1
checksum and verifies it against a list of known checksums.  Then it tries to
configure, build and test Node.  Currently it doesn't install but does
everything except `make install`.

Note that it only installs a single version in a single place at a time.
For more advanced tools to manage Node installations see:
[nvm](https://github.com/creationix/nvm) by 
[Tim Caswell](https://github.com/creationix) and
[nave](https://github.com/isaacs/nave) by
[Isaac Z. Schlueter](https://github.com/isaacs).

Both nvm and nave can be used to manage many different Node versions installed
simultaneously on the same system.  Getnode on the other hand can be used to
install one version of Node on many different systems.  So if you need to run
a specific version of Node in a heterogeneous environment of incompatible
systems where binary deployment is not an option then Getnode may be for you.

SECURITY
--------
Getnode uses insecure HTTP connections to download the source code but it then
verifies it against a list of known SHA-1 checksums to make sure that the
downloaded code contains exactly what was expected.

Currently it knows checksums of the following versions of Node:

* 0.1.100 - 0.1.104
* 0.2.0 - 0.2.6
* 0.3.0 - 0.3.8
* 0.4.0 - 0.4.4

If you try to get a version of Node that Getnode doesn't know about then
you have to explicitly accept the computed checksum so you have an option
to verify it manually.

Note that at the time of this writing there is no list of SHA-1 checksums on
the [Node.js website](http://nodejs.org/).  Also, the Node.js website cannot
be accessed using HTTPS.

The checksums in this script were computed manually after downloading the
above versions over HTTP so they are not guaranteed to be "correct".  It is
possible, however unlikely, that I have computed checksums of corrupted or
even malware-infected versions.  What you can tell after a positive
verification is that you have downloaded the same file as I have.  This is
usually enough to avoid local and/or temporary attacks like local DNS
spoofing, cache poisoning or TCP session hijacking, that could potentially
allow the attacker to provide any arbitrary payload as the requested source
code that is downloaded over HTTP.

PREREQUISITES
-------------
Getnode uses cURL or Wget to download the source code of Node; OpenSSL,
sha1sum or shasum to verify it; Tar to extract it and Make to build it.
Building Node requires essential development tools like Make and a C++
compiler, Python version 2.4 or higher and a development version of the SSL
library.  Testing Node requires cURL.

Most of those tools are probably installed by default on any modern system.
For example on a fresh install of Ubuntu Server 10.10 you need to run:

    sudo apt-get install build-essential libssl-dev curl

to have everything needed to build and test Node.

See more info on
[Node's dependencies](https://github.com/ry/node/wiki/Installation).

BUGS
----
If you find any bugs or have any suggestion, please use
[the issue tracking system](https://github.com/rsp/getnode/issues)
or fork [the project on GitHub](https://github.com/rsp/getnode),
commit your changes and send me a pull request.

TODO
----
There is still a lot to do to make this script more useful.

* The default installation prefix will change and more shortcuts will be added.
* There should be an option to build without SSL and maybe without testing.
* There will be an option to automatically `make install`.
* There will be option to automatically give the default answer to any question.
* There might be an option to provide url instead of version for local mirrors.
* There might be an option to update PATH and MANPATH.
* There should be an option to (securely) install NPM

This is an early version, use it at your own risk.

AUTHOR
------
Copyright (c) 2010, 2011 Rafal Pocztarski.

LICENSE
-------
This program is released under the MIT License.  See LICENSE or run
`getnode license` for details.  It comes with ABSOLUTELY NO WARRANTY.
END_DESCRIPTION

function warn {
    echo -e "$1" >&2
}
function error {
    warn "$1" 
    exit 1
}
function usage_help {
    echo -e "GETNODE - $HEADER\n\n$INTRO\n\n$USAGE"
    exit
}
function usage_error {
    warn "GETNODE - $HEADER\n\nError: Bad arguments\n\n$USAGE\n"
    error 'See README.md or run `getnode help | less` for help.'
}
function help {
    echo -e "GETNODE\n=======\n\n$INTRO\n\n$USAGE\n\n$DESCRIPTION"
    exit
}
function license {
    echo -e "$LICENSE"
    exit
}
function askcontinue {
    read -p "Do you want to continue [Y/n]? "
    case "$REPLY" in
        "");;
        [Yy]);;
        [Yy][Ee][Ss]);;
        *) error "Aborting";;
    esac
}
function askcontinue_n {
    read -p "Do you REALLY want to continue [y/N]? "
    case "$REPLY" in
        [Yy]);;
        [Yy][Ee][Ss]);;
        *) error "Aborting";;
    esac
}
function find_get_command {
    get_program=$(which curl) && {
        get_command="$get_program -f -O"
        return
    }
    get_program=$(which wget) && {
        get_command="$get_program"
        return
    }
    return 1
}
function find_sha1_command {
    digest_length=40
    hash_program=$(which openssl) && {
        hash_command="$hash_program dgst -sha1"
        return
    }
    hash_program=$(which sha1sum) && {
        hash_command="$hash_program"
        return
    }
    hash_program=$(which shasum) && {
        hash_command="$hash_program -a1"
        return
    }
    return 1
}
function known_sha1 {
    case "$1" in
        node-v0.1.100.tar.gz) sha1=456148d0b050ffa4fb2766099a41f6a15d0f9e5c;;
        node-v0.1.101.tar.gz) sha1=38de769c943f6583e139058b081da665a1c2afa7;;
        node-v0.1.102.tar.gz) sha1=348604a2b2d238d6745c9dc0ef640bcf8fc40379;;
        node-v0.1.103.tar.gz) sha1=abcbb4ee7acf898c53fb610d52965b35de0413a6;;
        node-v0.1.104.tar.gz) sha1=9fa142bb532b9ff9031be382b864aea6a8fa0389;;
        node-v0.2.0.tar.gz) sha1=79e52937f5fa6f233985d766f137b4b8f22481b2;;
        node-v0.2.1.tar.gz) sha1=289b53832c2157909c72a8b7b0e5a501a5be7275;;
        node-v0.2.2.tar.gz) sha1=4b8a734008ed3e9ba10d72c4f8a60ae56395d992;;
        node-v0.2.3.tar.gz) sha1=5fa3d2b9f5153b87b8f1e3cfc6d0a2cb70832969;;
        node-v0.2.4.tar.gz) sha1=1f7d3211432e2c2669ddcc098f1e7efcee03878a;;
        node-v0.2.5.tar.gz) sha1=dbf9ad808bf74c908e8c247ce06c8f083edc388f;;
        node-v0.2.6.tar.gz) sha1=6c77915283eb81914cc39ece07b41de9b5d60c39;;
        node-v0.3.0.tar.gz) sha1=3a6a176f7cfa3b75cad4f1a54f2b04e1a4405118;;
        node-v0.3.1.tar.gz) sha1=91d7a9d188c8323cfa8de76cc52e5507aad81778;;
        node-v0.3.2.tar.gz) sha1=dd611c52a48029a817408725b96d0a8c776a5340;;
        node-v0.3.3.tar.gz) sha1=44887ed360f8fc53f3ba03e6f599841ed23042c9;;
        node-v0.3.4.tar.gz) sha1=75508bb1781c5a4214b2c3d113cf51df39b326b8;;
        node-v0.3.5.tar.gz) sha1=26de17d2929e3f8e7ffa40f6b155e323d06f8517;;
        node-v0.3.6.tar.gz) sha1=a20a708d62c11bbbd4488445b3ed04c26ed37b7d;;
        node-v0.3.7.tar.gz) sha1=7a40ef2df98b97025db68d7100f02f540b5bbf7d;;
        node-v0.3.8.tar.gz) sha1=6f2620a4912af875b5aaaf89d21d94d3b4b9a727;;
        node-v0.4.0.tar.gz) sha1=303b616be1ea17b16d771cced02115705be0b934;;
        node-v0.4.1.tar.gz) sha1=5caf42afb0f9d0e34514ecd9b8aa163c66894fee;;
        node-v0.4.2.tar.gz) sha1=d509e791c24245fcb289510952f1610779989441;;
        node-v0.4.3.tar.gz) sha1=ea4b1fb468ebdf76d9ef2262835167b5620b914b;;
        node-v0.4.4.tar.gz) sha1=9ec6417d14fda7c4115e78a05907b4afe2f0486b;;
        *) sha1=unknown;;
    esac
    knownhash=$sha1
}

case "$1" in
    "") usage_error;;
    usage) usage_help;;
    help) help;;
    license) license;;
esac

[ $# -eq 1 ] || [ $# -eq 2 ] || usage_error

version="$1"
dir="node-v$version"
file="$dir.tar.gz"
url="http://nodejs.org/dist/$file"
if [ "$2" == "" ]; then
    prefix="$HOME/local/node"
elif [ "$2" == "v" ] || [ "$2" == "V" ]; then
    prefix="$HOME/local/node-$version"
else
    prefix="$2"
fi
warn "GETNODE - $HEADER\n"
warn "Getnode is going to download:"
warn "    $url"
warn "and build it for installation in:"
warn "    $prefix"
askcontinue

d1=`date '+%Y-%m-%d %H:%M:%S'`
if [ -d $dir ]; then
    error "Directory $dir already exists - remove manually"
fi
if [ -f $file ]; then
    warn "File $file already exists - skipping download"
else
    find_get_command || error "You need to have curl or wget installed in PATH"
    warn "Using $get_program to download $file"
    $get_command $url || error "Download failed"
fi
if [ ! -f $file ]; then
    error "File $file not found - download failed"
fi
ls -alp $file

if find_sha1_command; then
    warn "Running: $hash_command < $file"
    hashline=`$hash_command < $file` || error "Error running $hash_command"
    realhash=${hashline%% *}
    known_sha1 $file
    warn "Computed SHA-1 checksum is: $realhash"
    if [ "$knownhash" = "unknown" ]; then
        warn "Correct checksum is unknown for this version"
        warn "You need to verify it yourself"
        askcontinue_n
    else
        warn "Correct checksum should be: $knownhash"
        if [ "$knownhash" = "$realhash" ]; then
            warn "Checksum OK"
            askcontinue
        else
            warn "Checksum ERROR!  Maybe an incomplete download?"
            error "Remove $file and try again"
        fi
    fi
else
    warn "Cannot find any program to calculate SHA-1 checksum!"
    askcontinue_n
fi

tar xzvf $file || error "Error extracting $file"
if [ ! -d $dir ]; then
    error "Directory $dir not found - extraction failed"
fi
cd $dir
./configure --prefix=$prefix && make && make test && \
warn DONE || error "ERROR building Node!  Do you have all prerequisites?"
d2=`date '+%Y-%m-%d %H:%M:%S'`
warn "From:\t$d1\nTo:\t$d2"
warn
warn "You can now 'cd $dir' and run 'make install' or 'sudo make install'"
warn "to install $dir in $prefix"
warn

